# samples for Siphon
# author:
# Copyright (C) 2011 ICHIKAWA, Yuji

# samples
samples =
  underscore :
    script :
      """
      # A sample for Underscore.js
      # PLEASE import Underscore.js before letting it run!
      if not _?
        alert 'PLEASE import Underscore.js!'
        return

      # Project Euler, Problem 1
      # If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
      # Find the sum of all the multiples of 3 or 5 below 1000.

      n = 1000
      union = _.union (x for x in [3...n] by 3), (x for x in [5...n] by 5)
      sum = (list) ->
        _(list).reduce ((acc, num) -> acc + num), 0
      window.siphon.log 'answer = ' + sum union

      # Derived problem
      # Solve the above problem using some formula to reduce amount of computations.


      # Project Euler, Problem 2
      # Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
      #         1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
      # Find the sum of all the even-valued terms in the sequence which do not exceed four million.

      fibonacci = _.memoize (n) ->
        if n <= 2 then n else fibonacci(n - 2) + fibonacci(n - 1)

      acc = 0
      i = 1
      until fibonacci(i) > 4000000
        acc += fibonacci(i) if fibonacci(i) % 2 == 0
        i++
      window.siphon.log 'answer = ' + acc
      """
    markup : ''
  processing :
    script :
      """
      # A sample for Processing.js
      # PLEASE import Processing.js before letting it run!
      # This sample is based on http://dry.ly/2011/02/21/coffeescript--processingjs--crazy-delicious/
      if not Processing?
        alert 'PLEASE import Processing.js!'
        return

      draw = (p5) -> # p5 is a contraction of processing
        p5.setup = ->
          p5.size $('#application').width(), $('#application').height()
          p5.background 0

        p5.draw = ->
          # noise() needs an "offset" argument
          # we'll tie it to the frame count
          x_off = p5.frameCount * 0.0005

          # we want y's offset to increase at the same rate
          # but be different (20 is arbitrary)
          y_off = x_off + 20

          # use noise(), the offset, and our sketch's dimensions
          # to get a "random" position for our "brush"
          x = p5.noise(x_off) * p5.width
          y = p5.noise(y_off) * p5.height

          # color our brush (red with 15% opacity)
          p5.stroke(255, 0, 0, 15)

          # draw at brush's current location (set above)
          p5.point(x, y)

      processing = new Processing($('#canvas')[0], draw)
      $('#exitbutton').bind 'click', ->
        window.siphon.log 'terminate'
        processing.exit()
      """
    markup :
      """
      <button id="exitbutton">terminate drawing</button>
      <canvas id="canvas"></canvas>
      """
  raphael :
    script :
      """
      # A sample for Raphaël
      # PLEASE import Raphaël before letting it run!
      # This sample is based on http://raphaeljs.com/playground.html
      if not Raphael?
        alert 'PLEASE import Raphaël!'
        return

      paper = Raphael($('#application')[0], 640, 480)
      paper.circle(320, 240, 60).animate
          fill : '#223fa3'
          stroke : '#000'
          'stroke-width' : 80
          'stroke-opacity' : 0.5
        , 2000
      """
    markup : ''
  dygraphs :
    script :
      """
      # A sample for dygraphs
      # PLEASE import "dygraphs" before letting it run!
      # This sample is based on http://dygraphs.com/tests/demo.html
      if not Dygraph?
        alert 'PLEASE import "dygraphs"!'
        return

      graph = new Dygraph document.getElementById("dygraph"),
        ->
          zp = (x) -> if (x < 10) then "0"+x else x
          r = "date,parabola,line,another line,sine wave\\n";
          for i in [1..31]
            r += "200610" + zp(i)
            r += "," + 10*(i*(31-i))
            r += "," + 10*(8*i)
            r += "," + 10*(250 - 8*i)
            r += "," + 10*(125 + 125 * Math.sin(0.3*i))
            r += "\\n";
          r
        ,
          labelsDiv : document.getElementById('status')
          labelsSeparateLines : true
          labelsKMB : true
          legend : 'always'
          colors : ['rgb(51,204,204)'
                    'rgb(255,100,100)'
                    '#00DD55'
                    'rgba(50,50,200,0.4)']
          width : 640
          height : 480
          title : 'Interesting Shapes'
          xlabel : 'Date'
          ylabel : 'Count'
          axisLineColor : 'white'
          drawXGrid : false
      """
    markup :
      """
      <font size=-1>(Mouse over to highlight individual values. Click and drag to zoom. Double-click to zoom out.)</font><br/>
      <table>
        <tr>
          <td>
            <div id="dygraph"></div>
          </td>
          <td valign=top>
            <div id="status" style="width:200px; font-size:0.8em; padding-top:5px;"></div>
          </td>
        </tr>
      </table>
      """
